
   ######### Name space ##########


   ######### DOCTRINE 2 ###########


	  => Pourquoi créer une entité manager /



	******** doctrine 2 generate entities from its database *********


  	******** Assurer la persistence ***********

       
        ******** Reverse Engineering *************



	******** Modèle/Vue *********

	
	création d'un logiciel de gestion de factures et client sous symfony


https://zestedesavoir.com/tutoriels/620/developpez-votre-site-web-avec-le-framework-symfony2/395_gerer-
la-base-de-donnees-avec-doctrine2/1999_recuperer-ses-entites-avec-doctrine2/




   ########## SYMFONY ################



	********* Function ***********

	
      => symfonylistAction // (taper requête)



	********** NotFoundException *********

    
    => symfony 3.4 homepage how to get a 200 status code

    => Symfony\Component\HttpKernel\Exception\NotFoundHttpException



############## ROUTAGE ################


      => symfony routing

      => Voir les REGEX


      => YourbundlenameMainBundle:

resource: "@YourbundlenameMainBundle/Resources/config/routing.yml"

prefix:   /
This is what I had and I was still getting the error. But then I read the error more closely... no route found for GET / .... then I checked my routing_dev.yml file and of course it had a route for / from the Acme demo bundle _welcome route. This is why it works for the dev version but not the prod version!

Solution:

Add a route for / to either your routing.yml global file or your routing.yml bundle file by adding the following:

_welcome:

pattern:  /

defaults: { _controller: YourbundlenameMainBundle:Default:index }
you can change index to some other route if your welcome page is not index


########## Bundles ##################"


      => Bundle ou services

      => Pour gérer les utilisateurs FosUserBundle => Créer un FOSUSER bundle 

      => Voir comment l'implémenter


      => Instancier les Bundle dans le Kernel


      => https://symfony.com/doc/3.4/bundles.html


      =>  il va falloir renommer tous les use PHP (attention au regroupement des use depuis PHP 7.1, une simple recherche ne retrouve pas toujours tout), 
       les appels à constant() dans Twig (attention au double \\ dans la recherche) etc. 


      => https://knpuniversity.com/blog/AppBundle





       ********* Creation des Repository **********






	************** Component ************





	******** Controller *************


	=> n addition to using the logical name or the fully-qualified class name, Symfony supports a third way of referring to a controller. 
	This method uses just one colon separator (e.g. service_name:indexAction) and refers to the controller as a service (see How to Define Controllers as Services).


        => https://symfony.com/doc/current/doctrine.html / Pour générer les controller

        => you can fetch the EntityManager via $this->getDoctrine()
        // or you can add an argument to your action: index(EntityManagerInterface $entityManager)





	******** ENTITY *****************


	=> A t'on encore besoin du paramètre  $chemin ? 



       *********** FORM *******************

 
       
    => http://symfony.com/doc/3.4/form/create_custom_field_type.html


    => https://symfony.com/doc/3.4/components/form.html


    => The Symfony Form component relies on other libraries to solve these problems. Most of the time you will use Twig and the Symfony HttpFoundation, Translation and Validator components, 

    but you can replace any of these with a different library of your choice.

    => For a working example, see https://github.com/webmozart/standalone-forms



	*********** TODO LIST ******************


    => https://symfony.com/doc/3.4/forms.html


	


	******** Les routes ***********

    => Each route also has an internal name: blog_list and blog_show. These can be anything (as long as each is unique) 
	and don't have any meaning yet. Later, you'll use it to generate URLs.


        ******** Code Sample ************



	******** Déclarer ses dépendances ********


    => composer.json / C'est là ou vérifie les dépendances

    => composer update met à jour les dépendances



################ Expression Régulières #############






################ PHP ########################


       ************* Traits *********************

   => Utiliser le mot clé USE

  => <?php
class Writer
{
  use HTMLFormater, TextFormater
  {
    HTMLFormater::format insteadof TextFormater;
  }
  
  public function write($text)
  {
    file_put_contents('fichier.txt', $this->format($text));
  }
}


    => Regardons de plus près cette ligne n°6. Pour commencer, notez qu'elle est définie dans une paire d'accolades suivant les noms des traits à utiliser. 
À l'intérieur de cette paire d'accolades se trouve la liste des « méthodes prioritaires ». 
Chaque déclaration de priorité se fait en se terminant par un point-virgule. Cette ligne signifie donc : « La méthodeformat()du traitHTMLFormaterécrasera la méthode du même nom du traitTextFormater(si elle y est définie). »




############# PCKAGIST #################


    => Voir packagist symfony 3

    => Comment Composer sait où trouver les bibliothèques ?

Très bonne question. En effet, il est évident que ce système de gestion ne peut marcher que si on peut centraliser les informations de chaque bibliothèque. 
Il s'agit du site www.packagist.org.

    => Par exemple, voici la page pour la bibliothèque Symfony2 (eh oui, c'est une bibliothèque comme une autre !) : https://packagist.org/packages/symfony/symfony. Vous pouvez voir les informations comme le mainteneur principal, le site de la bibliothèque, etc. Mais ce qui nous importe le plus, ce sont les sources ainsi que les dépendances (dans Requires).


   ########### Profiler #############


    => https://symfony.com/doc/3.4/profiler.html




   ###########  APPLI RENOVIE ###############


	******** Clients **************


      => Instruction pour facture non réglée (créer une interface facture)
	


    ########## FORM #################

	



    ############## Routing #############


    => https://symfony.com/doc/3.4/routing.html






     ######## ANNOTATION #########




     ######## FUNCTION ########


	=> buildForm

        => ConfigureOptions



     ########  TWIG ##########

  
    => bootstrap_4_layout.html (taper requête)

    => Voir TwigBundle Configuration


    => "mettre en forme une liste avec tWIG"   (Revoir cette requête très bonne requête)

    => "retour chariot twig"



      ####### BDD ########


	=> vérifier si l'on passe par le controller pour persister les objets 


	=> "How to Use Doctrine DBAL" / 


	=> $QueryBuilder (variable à déclarer voir dans quel fichier)


	=> Chargé les données de Test


	=> http://www.keiruaprod.fr/symblog-fr/docs/maj-des-articles-ajout-de-commentaires.html (voir super important)

	   Afin d’afficher les articles, nous devons les récupérer depuis la base de donnée. Doctrine 2 utilise le langage langage de requêtes Doctrine (pour Doctrine Query Language, ou DQL) ainsi qu’un système de construction de requêtes (QueryBuilder) pour celà. Vous pouvez bien évidemment utiliser du SQL pûr avec Doctrine 2, mais c’est fortement découragé, car celà retire l’abstraction que Doctrine nous fournit. Nous allons utiliser le QueryBuilder, car il nous fournit une manière objet sympathique pour effectuer nos requêtes sur la base de donnée. Nous allons mettre à jour l’action index du contrôleur 
           Page dans src/Blogger/BlogBundle/Controller/PageController.php pour récupérer les articles de la base de donnée.

	// src/Blogger/BlogBundle/Controller/PageController.php
class PageController extends Controller
{
    public function indexAction()
    {
        $em = $this->getDoctrine()
                   ->getEntityManager();

        $blogs = $em->createQueryBuilder()
                    ->select('b')
                    ->from('BloggerBlogBundle:Blog',  'b')
                    ->addOrderBy('b.created', 'DESC')
                    ->getQuery()
                    ->getResult();

        return $this->render('BloggerBlogBundle:Page:index.html.twig', array(
            'blogs' => $blogs
        ));
    }

    // ..
}


   	****** L'index *******



	=> les tables de jointures lors de ManyToMany)

	=> If you want to have a one-to-many relationship, you will need to add it manually into the entity or to the generated XML or YAML files. 
           Add a section on the specific entities for one-to-many defining the inversedBy and the mappedBy pieces.


       ******* Commande Symfony *********

      
       => php bin/console doctrine:database:create

       => Pour importer la base de données doit-on créer les entités avant 



	******* Migration Class *********




	******** issues *********


	Pour résoudre ce type d'erreur :  

SQLSTATE[HY000] [2006] MySQL server has gone away ou 
Creating database schema...
[PDOException]
SQLSTATE[HY000] [2006] MySQL server has gone away
[ErrorException]
Warning: PDO::__construct(): MySQL server has gone away in E:\wamp\www\0-aides\mooveradio\Symfony\vendor\doctrine-dbal\lib\Doctrine\DBAL\Driver\PDOConnection.php line 36
doctrine:schema:create [--dump-sql] [--em[="..."]]
Réponse :
1- Il faut aller dans le dossier suivant : symfony/app/config/
2- Ouvrir le fichier : parameters.yml
3- mettre le numéro du port de la base de données : database_port:3306
4- Vous sauvegardez le fichier!
5- Vous actualisez la page web et vous allez bien sourire ^_^
-> Si vous avez un doute sur le numéro de port de la base de données, vous pouvez aller : wamp/bin/php/php_avec_version/ et vous cherchez le fichier php.ini et vous le parcourez jusqu'à trouver la ligne suivante : mysql.default_port et vous verrez le numéro de port à utiliser ^_^
Bon courage pour la suite (y)





   ######## Presentation Memoire #########


       => https://symfony.com/doc/3.4/doctrine.html (page à connaître par coeur),

       => Querying for Objects.

       => Les injections SQL


      => Paragraphe sur le choix d'environnement

      => J'en ai profité pour explorer de manière approfondi ce framework que j'apprécie vraiment 
         (Attention parce qu'après je dois le justifier)

      => Injection de dépendances


      => Plus besoin de configurer ses dépendances

         Plus besoin de déclarer soi-même ses services


	*********** si il essaye de minimiser Symfony / Pourquoi Symfony ? *********

       
       => Avec Symfony j'apprends à maitriser HTTP /

       => Ne pas oublié d'être 


        ************ EN PRODUCTION ****************

	=> Symfony's web server is great for developing, but should not be used on production. Instead, 
           use Apache or Nginx. See Configuring a Web Server.


	*********** Screen Capture **********


	=> Capture d'écran de config symfony /https://symfony.com/doc/3.4/introduction/http_fundamentals.html

		=> Important explique le HTTP/ Le get et le POST



	*********** BDD *************


       => Pour les requêtes je pourrai aussi bien les présenter et les executer en ligne de commande qu'avec l'entity manager

       => Les classes permetteant d'interroger la base de données au travers d'objets....




        ********** Mapping ***********

    
       => Les informations en base de données doivent être mappées
 

       
       ************ L'encaodage BDD *********

       
       => Sinon, tout simplement, si ta base de donnée est encodé en latin1, afficher ensuite ses données en utf8 te causera des soucis, 
          tu auras des accents bizarres et tu devras bidouiller pour obtenir un résultat. Alors qu'en mettant ta base de donnée en UTF-8 comme ton site, avec l'interclassement des colonnes ET de la base de donnée. Déjà là tu n'auras plus à bidouiller.


       ************ ARBORESCENCE **************



The recommended approach of using the AppBundle/ directory is for simplicity. If you're advanced enough to know what needs to live in a bundle and what can live outside of one, then feel free to do that.

   
  ######## Security ############

  
   => https://knpuniversity.com/screencast/symfony4-upgrade/sf34-deprecations

   => LoginFormauthenticator 





   ######## Git ###########

  
      => Bonne page à consulter : git-scm.com/book/fr/v2/Utilitaires-Git-Remisage-et-nettoyage



   ######## Constructor ########

       => php.net/manual/fr/language.oop5.decon.php




   ######## Ruby #########


  	=> Les constructors dans ruby

	=> Qt side c'est le controller par default



   #######  MDP ###########


Une note sur parameters.php
Il est possible d’utiliser le fichier parameters.yml, par contre, il est impossible d’exécuter des commandes PHP dans un fichier YAML.

Dans le très bon article 12 factor app, il est recommandé de ne pas inscrire de mot de passe dans vos fichiers de projet. Cela amène 2 avantages importants :

Conserve votre mot de passe privé.
Permet de déployer votre application vers plusieurs environnements sans avoir à modifier le code.
Le truc : les variables d’environnement
Il faut éviter de déposer vos mots de passe dans votre code. Où les mettre alors? La réponse est de déposer vos mots de passe et vos configurations dans des variables d’environnement et de les récupérer avec la commande PHP getenv().
	


    ####### Modélisation #######

    
    => Conception orientés objet

    => https://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/uml-modelisons-nos-classes-2-2

    => https://www.google.fr/search?q=connaissance+des+m%C3%A9thodes+UML+appr%C3%A9ci%C3%A9e&rlz=1C1AVFA_enFR783FR783&oq=connaissance+des+m%C3%A9thodes+UML+appr%C3%A9ci%C3%A9e&aqs=chrome..69i57.13154j1j7&sourceid=chrome&ie=UTF-8



    ######### Conception ########


    => https://openclassrooms.com/forum/sujet/symfony-3-creation-projet-bundle-decoupage?page=1



   ######### Requêtes ###########

   
   => doctrine importer les classes d'une base de données

   => doctrine commande git après avoir importé la base de donnée

   => GIT annuler le drop d'un base de données

   => doctrine:database:import + name of file


  => Symfony/3.4/construct

  => Très très bon lien https://symfony.com/doc/3.4/doctrine.html

  => création d'un logiciel de gestion de factures et client sous symfony


     ************ Reverse Engeneering *************


   https://openclassrooms.com/forum/sujet/doctrine-reverse-engineering

  https://symfony.com/doc/3.4/doctrine/reverse_engineering.html



############ Repository #############


   => https://symfony.com/doc/3.4/doctrine/repository.html


In the previous sections, you began constructing and using more complex queries from inside a controller. In order to isolate, reuse and test these queries, it's a good practice to create a custom repository class for your entity. Methods containing your query logic can then be stored in this class.

To do this, add the repository class name to your entity's mapping definition:
















